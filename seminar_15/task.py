'''
–í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ
üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
'''
import logging
import sys
import argparse

logging.basicConfig(filename='task_2.log', level=logging.ERROR, encoding='utf-8')

class SideError(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        logging.error(f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ. –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {self.value}')
        return f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ. –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {self.value}'

class Rectangle:

    def __init__(self, length: int, width: int = None):
        if length > 0:
            self.length = length
        else:
            raise SideError(length)
        if width is not None and width > 0:
            self.width = width
        elif width is None:
            self.width = length
        else:
            raise SideError(width)


    def perimeter(self):
        ''' Perimeter'''
        return (self.length + self.width) * 2

    def square(self):
        ''' Square'''
        return self.length * self.width

    def __doc__(self):
        return "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"

    def __add__(self, other):
        ''' —Å–ª–æ–∂–µ–Ω–∏—è'''
        return self.perimeter() + other.perimeter()

    def __sub__(self, other):
        ''' –≤—ã—á–∏—Ç–∞–Ω–∏—è '''
        return abs(self.perimeter() - other.perimeter())

    def __eq__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() == other.square()

    def __ne__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() != other.square()

    def __gt__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() > other.square()

    def __ge__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() >= other.square()

    def __lt__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() < other.square()

    def __le__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() <= other.square()

    def __str__(self):
        return f'–î–ª–∏–Ω–∞ - {self.length}, –®–∏—Ä–∏–Ω–∞ - {self.width}'

    def __repr__(self):
        return f'–î–ª–∏–Ω–∞ - {self.length}, –®–∏—Ä–∏–Ω–∞ - {self.width}'

class MatrixError(Exception):
    def __init__(self, matrix, other):
        self.col = len(matrix)
        self.row = len(matrix[0])
        self.col1 = len(other)
        self.row1 = len(other[0])

    def __str__(self):
        logging.error(f'–ú–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤. –ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ 1- {self.col} 2- {self.col1}. –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ 1- {self.row} 2- {self.row1}')
        return f'–ú–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤. –ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ 1- {self.col} 2- {self.col1}. –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ 1- {self.row} 2- {self.row1}'

class Matrix:
    '''
    –ó–∞–¥–∞–Ω–∏–µ

    üìå –î–æ–±–∞–≤—å—Ç–µ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º —Å —Å–µ–º–∏–Ω–∞—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –ø–µ—á–∞—Ç—å.
    üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ú–∞—Ç—Ä–∏—Ü–∞. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è:
        ‚óã –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–µ—á–∞—Ç—å,
        ‚óã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,
        ‚óã —Å–ª–æ–∂–µ–Ω–∏—è,
        ‚óã *—É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
    '''

    def __init__(self, matrix: list[list[int]]):
        ''' –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '''
        self.matrix = matrix

    def matrix_transposition(self):
        '''
        —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
        '''
        new_matrix = [[0] * len(self.matrix) for i in range(len(self.matrix[0]))]
        for i in range(len(self.matrix)):
            for j in range(len(self.matrix[0])):
                new_matrix[j][i] = self.matrix[i][j]
        return new_matrix


    def __str__(self):
        ''' –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã '''
        res = '–í—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n'
        for row in self.matrix:
            for elem in row:
                res += ''.join(f'{elem}\t')
            res += ''.join('\n')
        return res

    def __repr__(self):
        ''' –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã '''
        res = '–í—ã–≤–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: \n'
        for row in self.matrix:
            for elem in row:
                res += ''.join(f'{elem}\t')
            res += ''.join('\n')
        return res

    def sum_matrix(self):
        ''' –°—É–º–º–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã'''
        res = 0
        for row in self.matrix:
            for elem in row:
                res += elem
        return res

    def __add__(self, other):
        ''' –ú–µ—Ç–æ–¥ —Å–ª–æ–∂–µ–Ω–∏—è'''
        res = []
        row = []
        if len(self.matrix) == len(other.matrix) and len(self.matrix[0]) == len(other.matrix[0]):
            for i in range(len(self.matrix)):
                for j in range(len(self.matrix[0])):
                    row.append(self.matrix[i][j] + other.matrix[i][j])
                res.append(row)
                row = []
            return Matrix(res)
        else:
            raise MatrixError(self.matrix, other.matrix)


    def __mul__(self, other):
        ''' –ú–µ—Ç–æ–¥ —É–º–Ω–æ–∂–µ–Ω–∏—è'''
        res = []
        row = []
        if len(self.matrix) == len(other.matrix[0]) and  len(other.matrix) == len(self.matrix[0]):
            for i in range(len(self.matrix)):
                for j in range(len(self.matrix[0])):
                    row.append(self.matrix[i][j] * other.matrix[j][i])
                res.append(row)
                row = []
            return Matrix(res)
        else:
            raise MatrixError(self.matrix, other.matrix)


    ''' –ú–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
    def __eq__(self, other):
        return self.sum_matrix() == other.sum_matrix()

    def __ne__(self, other):
        return self.sum_matrix() != other.sum_matrix()

    def __gt__(self, other):
        return self.sum_matrix() > other.sum_matrix()

    def __ge__(self, other):
        return self.sum_matrix() >= other.sum_matrix()

    def __lt__(self, other):
        return self.sum_matrix() < other.sum_matrix()

    def __le__(self, other):
        return self.sum_matrix() <= other.sum_matrix()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫')
    parser.add_argument('-a', metavar='a', type=float, help='enter a for Rectangle', default=1)
    parser.add_argument('-b', metavar='b', type=float, help='enter b for Rectangle')
    args = parser.parse_args()
    print(Rectangle(args.a, args.b))
    # –ø—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞
    # python3 HW_Task_02.py -a 2 -b 3
    # python3 HW_Task_02.py -a 2

    # parser = argparse.ArgumentParser(description='–ú–∞—Ç—Ä–∏—Ü–∞')
    # parser.add_argument('-a', metavar='a', type=list[list[int]], help='enter a for Matrix', default=[[1, 1], [1, 1]])
    # parser.add_argument('-b', metavar='b', type=list[list[int]], help='enter b for Matrix', default=[[1, 1], [1, 1]])
    # args = parser.parse_args()
    # matrix = Matrix(args.a)
    # matrix_1 = Matrix(args.b)
    # print(matrix.sum_matrix())
    # print(matrix * matrix_1)
